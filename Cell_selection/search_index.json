[
["load-data.html", "Progenitor pop selection 1 Load data", " Progenitor pop selection Nathalie Lehmann 2021-01-17 1 Load data In this notebook we will manage to select progenitors cells based on a score (defined on a set of marker genes). The data was stored previously as a RDS object. It contains a Seurat object of cells from all 5 time-points. We just remove the mesoderm and neural crest cells. We kept both males and females. All together there are 25574 cells and 20082 genes. Idents(dat.seurat) &lt;- &#39;timepoint&#39; # Number of cells per time-point table(Idents(dat.seurat)) ## ## 9.5 10.5 11.5 12.5 13.5 ## 1938 3508 5000 6877 8251 DimPlot(object = dat.seurat, reduction = &#39;umap&#39;) "],
["create-and-assign-cell-state-scores.html", "2 Create and assign cell state scores 2.1 How it works 2.2 Progenitors score 2.3 Neurons score", " 2 Create and assign cell state scores 2.1 How it works We calculate the average expression levels of each program (cluster) on single cell level, subtracted by the aggregated expression of control feature sets. All analyzed features are binned based on averaged expression, and the control features are randomly selected from each bin. 2.2 Progenitors score genes.progenitors &lt;- c(&#39;Sox2&#39;, &#39;Notch1&#39;, &#39;Rrm2&#39;, &#39;Hmgb2&#39;, &#39;Cenpa&#39;, &#39;Ube2c&#39;, &#39;Hes5&#39;, &#39;Fabp7&#39;) genes.list &lt;- list(genes.progenitors) enrich.name &lt;- &quot;Progenitors_&quot; scores &lt;- paste0(enrich.name, &#39;1&#39;) dat.seurat &lt;- AddModuleScore(dat.seurat, features = genes.list, pool = rownames(x = dat.seurat), nbin = 5, seed = 123456, ctrl = length(genes.list), k = FALSE, name = enrich.name) for (i in seq(1:length(genes.progenitors))){ print(FeaturePlot(object = dat.seurat, features = genes.progenitors[i], reduction = &#39;umap&#39;, cols = c(&quot;grey90&quot;, brewer.pal(9,&quot;YlGnBu&quot;)), pt.size = 0.2, slot = &quot;data&quot;, order = TRUE))} 2.3 Neurons score 2.3.1 With Tubb3 in the score genes.neurons.tubb3 &lt;- c(&#39;Tubb3&#39;, &#39;Stmn2&#39;, &#39;Nova1&#39;, &#39;Snrpn&#39;, &#39;Pcsk1n&#39;, &#39;Meg3&#39;, &#39;Rtn1&#39;, &#39;Stmn3&#39;, &#39;Mllt11&#39;, &#39;Mapt&#39;, &#39;Ina&#39;) genes.list &lt;- list(genes.neurons.tubb3) enrich.name &lt;- &quot;Neurons_Tubb3_&quot; scores &lt;- append(scores, paste0(enrich.name, &#39;1&#39;)) dat.seurat &lt;- AddModuleScore(dat.seurat, features = genes.list, pool = rownames(x = dat.seurat), nbin = 5, seed = 123456, ctrl = length(genes.list), k = FALSE, name = enrich.name) for (i in seq(1:length(genes.neurons.tubb3))){ print(FeaturePlot(object = dat.seurat, features = genes.neurons.tubb3[i], reduction = &#39;umap&#39;, cols = c(&quot;grey90&quot;, brewer.pal(9,&quot;YlGnBu&quot;)), pt.size = 0.2, slot = &quot;data&quot;, order = TRUE))} 2.3.2 Without Tubb3 in the score genes.neurons &lt;- genes.neurons.tubb3[-1] genes.list &lt;- list(genes.neurons) enrich.name &lt;- &quot;Neurons_&quot; scores &lt;- append(scores, paste0(enrich.name, &#39;1&#39;)) dat.seurat &lt;- AddModuleScore(dat.seurat, features = genes.list, pool = rownames(x = dat.seurat), nbin = 5, seed = 123456, ctrl = length(genes.list), k = FALSE, name = enrich.name) for (i in seq(1:length(genes.neurons))){ print(FeaturePlot(object = dat.seurat, features = genes.neurons[i], reduction = &#39;umap&#39;, cols = c(&quot;grey90&quot;, brewer.pal(9,&quot;YlGnBu&quot;)), pt.size = 0.2, slot = &quot;data&quot;, order = TRUE))} "],
["visualize-cell-state-scores.html", "3 Visualize cell state scores 3.1 On UMAP embeddings 3.2 Check distribution of the scores", " 3 Visualize cell state scores 3.1 On UMAP embeddings 3.1.1 Single scores for (i in seq(1:length(scores))){ print(FeaturePlot(object = dat.seurat, features = scores[i], cols = rev(brewer.pal(10,&quot;Spectral&quot;)), reduction = &quot;umap&quot;, order = TRUE, pt.size = 0.2))} 3.1.2 Double scores p &lt;- FeaturePlot(object = dat.seurat, features = c(scores[1], scores[2]), cols = c(&quot;lightgrey&quot;, &quot;#ff0000&quot;, &quot;#00ff00&quot;), reduction = &quot;umap&quot;, order = TRUE, pt.size = 0.2, combine = FALSE, blend = TRUE) print(p[[3]]) p &lt;- FeaturePlot(object = dat.seurat, features = c(scores[1], scores[3]), cols = c(&quot;lightgrey&quot;, &quot;#ff0000&quot;, &quot;#00ff00&quot;), reduction = &quot;umap&quot;, order = TRUE, pt.size = 0.2, combine = FALSE, blend = TRUE) print(p[[3]]) 3.2 Check distribution of the scores for (i in seq(1:length(scores))){ print(scores[i]) print(summary(dat.seurat@meta.data[,scores[i]]))} # With TUBB3 FeatureScatter( object = dat.seurat, feature1 = scores[1], feature2 = scores[2], cells = NULL, group.by = NULL, cols = NULL, pt.size = 0.2, shape.by = NULL, span = NULL, smooth = FALSE, combine = TRUE, slot = &quot;data&quot; ) # Without TUBB3 FeatureScatter( object = dat.seurat, feature1 = scores[1], feature2 = scores[3], cells = NULL, group.by = NULL, cols = NULL, pt.size = 0.2, shape.by = NULL, span = NULL, smooth = FALSE, combine = TRUE, slot = &quot;data&quot; ) "],
["cluster-the-cells-based-on-their-signatures-scores.html", "4 Cluster the cells based on their signatures scores 4.1 k = 3 4.2 k = 4 4.3 k = 5 4.4 k = 6", " 4 Cluster the cells based on their signatures scores 4.1 k = 3 4.1.1 With TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_Tubb3_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_Tubb3_1), centers = kcenter) dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 ## 11787 8376 5411 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 ## 0.4608978 0.3275201 0.2115821 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_Tubb3_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } 4.1.2 Without TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_1), centers = kcenter) dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 ## 11800 8241 5533 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 ## 0.4614061 0.3222413 0.2163525 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } 4.2 k = 4 4.2.1 With TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_Tubb3_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_Tubb3_1), centers = kcenter) dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 Clust.4 ## 10009 5007 5866 4692 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 Clust.4 ## 0.3913741 0.1957848 0.2293736 0.1834676 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_Tubb3_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } 4.2.2 Without TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_1), centers = kcenter) dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 Clust.4 ## 8162 6665 6243 4504 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 Clust.4 ## 0.3191523 0.2606163 0.2441151 0.1761164 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } 4.3 k = 5 4.3.1 With TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_Tubb3_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_Tubb3_1), centers = kcenter) dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 ## 6510 4178 3230 4518 7138 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 ## 0.2545554 0.1633690 0.1263001 0.1766638 0.2791116 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_Tubb3_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } 4.3.2 Without TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_1), centers = kcenter) dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 ## 6321 4185 3307 4609 7152 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 ## 0.2471651 0.1636428 0.1293110 0.1802221 0.2796590 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } 4.4 k = 6 4.4.1 With TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_Tubb3_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_Tubb3_1), centers = kcenter) ## Warning: did not converge in 10 iterations dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 Clust.6 ## 1422 3821 6434 2969 7087 3841 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 Clust.6 ## 0.05560335 0.14940956 0.25158364 0.11609447 0.27711738 0.15019160 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_Tubb3_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } 4.4.2 Without TUBB3 set.seed(12345) kident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) cl &lt;- kmeans(cbind(dat.seurat@meta.data$Progenitors_1, dat.seurat@meta.data$Neurons_1), centers = kcenter) dat.seurat@meta.data[[kident]] &lt;- paste0(&quot;Clust.&quot;,cl$cluster) table(dat.seurat@meta.data[[kident]]) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 Clust.6 ## 5731 4548 3813 2666 4821 3995 prop.table(table(dat.seurat@meta.data[[kident]])) ## ## Clust.1 Clust.2 Clust.3 Clust.4 Clust.5 Clust.6 ## 0.2240948 0.1778369 0.1490967 0.1042465 0.1885118 0.1562133 p1 &lt;- ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_1, alpha = 0.5)) + geom_point(aes_string(colour = kident)) + theme(legend.position=&quot;none&quot;) + scale_color_manual(values=col.pal) ggMarginal(p1, type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;) DimPlot(dat.seurat, group.by = kident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) for(k in seq(1, kcenter, 1)){ print(DimPlot(dat.seurat, group.by = kident, cells = which(dat.seurat@meta.data[[kident]] == paste0(&#39;Clust.&#39;, k)), reduction = &quot;umap&quot;, cols = col.pal[k], label.size = 4)) } "],
["show-markers-expression-on-signature-score-plots.html", "5 Show markers expression on signature score plots", " 5 Show markers expression on signature score plots for (marker in markers){ print(marker) dat.seurat@meta.data[[marker]] &lt;- dat.seurat@assays$RNA@data[marker,] print(summary(dat.seurat@meta.data[[marker]])) print(ggMarginal( ggplot(dat.seurat@meta.data, aes(x = Progenitors_1, y = Neurons_Tubb3_1, alpha = 0.5)) + geom_point(aes_string(color = marker)) + scale_color_gradientn(colors = c(&quot;lightblue&quot;, &quot;yellow2&quot;, &quot;red&quot;)), type = &quot;histogram&quot;, fill=&quot;lightgrey&quot;)) } ## [1] &quot;Btg2&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3717 0.6378 3.5557 ## [1] &quot;Sox1&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06155 0.00000 2.60269 ## [1] &quot;Sox2&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.591 1.247 3.396 ## [1] &quot;Sox3&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06799 0.00000 2.47830 ## [1] &quot;Tubb3&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.188 2.789 2.307 3.365 4.718 ## [1] &quot;Olig2&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02355 0.00000 2.88069 ## [1] &quot;Pax6&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3283 0.0000 4.2669 ## [1] &quot;Pax7&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.07511 0.00000 2.52612 ## [1] &quot;Isl1&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1392 0.0000 4.0365 ## [1] &quot;Isl2&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02754 0.00000 2.58664 ## [1] &quot;Notch1&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.2885 0.0000 2.8345 ## [1] &quot;Dll1&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1785 0.0000 3.0640 ## [1] &quot;Cdc25b&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1975 0.0000 3.0537 ## [1] &quot;Btg2&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3717 0.6378 3.5557 ## [1] &quot;Sox2&quot; ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.591 1.247 3.396 ## Loading required package: grid "],
["vizualise-cells-to-keep.html", "6 Vizualise cells to keep 6.1 Threshold = 0.1 6.2 Threshold = 0.2 6.3 Threshold = 0.3 6.4 Threshold = 0.4 6.5 Threshold = 0.5", " 6 Vizualise cells to keep # Keep same clustering as previously docs_3 section 4.1.2 dat.seurat &lt;- readRDS(file = paste0(DATA_RDS, &quot;seurat_cell_select.rds&quot;)) # Set different threshold values th.remove &lt;- seq(0.1, 0.5, 0.1) 6.1 Threshold = 0.1 # Separate dataset in 2 (cells to keep VS to remove) kcenter &lt;- 3 cl &lt;- 2 set.ident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) Idents(dat.seurat) &lt;- set.ident cl.remove &lt;- paste0(&#39;Clust.&#39;, cl) index.remove &lt;- which( dat.seurat@meta.data[, set.ident] == cl.remove &amp; dat.seurat@meta.data[[&#39;Progenitors_1&#39;]] &lt; th ) dat.remove &lt;- dat.seurat[, index.remove] dat.keep &lt;- dat.seurat[, -index.remove] dim(dat.remove) ## [1] 20082 244 dim(dat.keep) ## [1] 20082 25330 # Cells we keep DimPlot(dat.keep, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) # Cells we remove DimPlot(dat.remove, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal[cl], label.size = 4) # Prepare for multiple plots define_region &lt;- function(row, col){ viewport(layout.pos.row = row, layout.pos.col = col) } for (marker in markers){ cat(&quot;\\n\\n### Show &quot;, marker, &quot; expression \\n&quot;) dat.keep@meta.data[[marker]] &lt;- dat.keep@assays$RNA@data[marker,] # Data summary of this marker in cells we keep print(summary(dat.keep@meta.data[[marker]])) dat.remove@meta.data[[marker]] &lt;- dat.remove@assays$RNA@data[marker,] # Data summary of this marker in cells we remove print(summary(dat.remove@meta.data[[marker]])) # Lowest values are grey col.pal &lt;- c(&quot;#C2C1BC1A&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) # Lowest values are transparent col.pal.transp &lt;- c(&quot;#C2C1BC00&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) p1 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal.transp) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = no dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p2 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p3 &lt;- ggplot(dat.keep@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Kept cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p4 &lt;- ggplot(dat.remove@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Removed cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) require(grid) grid.newpage() pushViewport(viewport(layout = grid.layout(3, 2))) print(p1, vp=define_region(1, 1:2)) print(p2, vp=define_region(2, 1:2)) print(p3, vp = define_region(3, 1)) print(p4, vp = define_region(3, 2)) } ## ## ## ### Show Btg2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3696 0.6270 3.5557 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.5921 1.1546 3.3614 ## ## ## ### Show Sox1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06108 0.00000 2.60269 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1108 0.0000 1.9542 ## ## ## ### Show Sox2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.5865 1.2393 3.3960 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.5615 1.1102 1.0560 1.5757 3.1166 ## ## ## ### Show Sox3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06717 0.00000 2.47830 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1532 0.0000 2.2837 ## ## ## ### Show Tubb3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.218 2.802 2.322 3.370 4.718 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.7754 1.7273 3.6707 ## ## ## ### Show Olig2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02329 0.00000 2.88069 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.05092 0.00000 1.62391 ## ## ## ### Show Pax6 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3258 0.0000 4.2669 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.589 1.222 2.376 ## ## ## ### Show Pax7 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.07468 0.00000 2.52612 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1192 0.0000 1.6986 ## ## ## ### Show Isl1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1402 0.0000 4.0365 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.0348 0.0000 2.5300 ## ## ## ### Show Isl2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02776 0.00000 2.58664 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.0044 0.0000 1.0735 ## ## ## ### Show Notch1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.2875 0.0000 2.8345 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3904 0.9123 2.2539 ## ## ## ### Show Dll1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1764 0.0000 3.0640 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3973 0.9281 2.7023 ## ## ## ### Show Cdc25b expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1961 0.0000 3.0537 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3343 0.5173 2.5389 6.2 Threshold = 0.2 # Separate dataset in 2 (cells to keep VS to remove) kcenter &lt;- 3 cl &lt;- 2 set.ident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) Idents(dat.seurat) &lt;- set.ident cl.remove &lt;- paste0(&#39;Clust.&#39;, cl) index.remove &lt;- which( dat.seurat@meta.data[, set.ident] == cl.remove &amp; dat.seurat@meta.data[[&#39;Progenitors_1&#39;]] &lt; th ) dat.remove &lt;- dat.seurat[, index.remove] dat.keep &lt;- dat.seurat[, -index.remove] dim(dat.remove) ## [1] 20082 523 dim(dat.keep) ## [1] 20082 25051 # Cells we keep DimPlot(dat.keep, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) # Cells we remove DimPlot(dat.remove, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal[cl], label.size = 4) # Prepare for multiple plots define_region &lt;- function(row, col){ viewport(layout.pos.row = row, layout.pos.col = col) } for (marker in markers){ cat(&quot;\\n\\n### Show &quot;, marker, &quot; expression \\n&quot;) dat.keep@meta.data[[marker]] &lt;- dat.keep@assays$RNA@data[marker,] # Data summary of this marker in cells we keep print(summary(dat.keep@meta.data[[marker]])) dat.remove@meta.data[[marker]] &lt;- dat.remove@assays$RNA@data[marker,] # Data summary of this marker in cells we remove print(summary(dat.remove@meta.data[[marker]])) # Lowest values are grey col.pal &lt;- c(&quot;#C2C1BC1A&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) # Lowest values are transparent col.pal.transp &lt;- c(&quot;#C2C1BC00&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) p1 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal.transp) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = no dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p2 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p3 &lt;- ggplot(dat.keep@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Kept cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p4 &lt;- ggplot(dat.remove@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Removed cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) require(grid) grid.newpage() pushViewport(viewport(layout = grid.layout(3, 2))) print(p1, vp=define_region(1, 1:2)) print(p2, vp=define_region(2, 1:2)) print(p3, vp = define_region(3, 1)) print(p4, vp = define_region(3, 2)) } ## ## ## ### Show Btg2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3668 0.6099 3.5557 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.6074 1.2111 3.3614 ## ## ## ### Show Sox1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06063 0.00000 2.60269 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.106 0.000 1.954 ## ## ## ### Show Sox2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.5819 1.2328 3.3960 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.1516 1.0933 1.0263 1.5539 3.1166 ## ## ## ### Show Sox3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06669 0.00000 2.47830 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1307 0.0000 2.2837 ## ## ## ### Show Tubb3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.251 2.815 2.339 3.376 4.718 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.7929 1.5535 4.1188 ## ## ## ### Show Olig2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02273 0.00000 2.88069 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06267 0.00000 2.23344 ## ## ## ### Show Pax6 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3223 0.0000 4.2669 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.617 1.222 2.554 ## ## ## ### Show Pax7 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.07405 0.00000 2.49898 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1258 0.0000 2.5261 ## ## ## ### Show Isl1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1413 0.0000 4.0365 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.0397 0.0000 2.9624 ## ## ## ### Show Isl2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02805 0.00000 2.58664 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000000 0.000000 0.000000 0.002985 0.000000 1.073523 ## ## ## ### Show Notch1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.2863 0.0000 2.8345 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3937 0.8883 2.2827 ## ## ## ### Show Dll1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1745 0.0000 3.0640 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3697 0.7497 2.8647 ## ## ## ### Show Cdc25b expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1949 0.0000 3.0537 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3207 0.4641 2.5389 6.3 Threshold = 0.3 # Separate dataset in 2 (cells to keep VS to remove) kcenter &lt;- 3 cl &lt;- 2 set.ident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) Idents(dat.seurat) &lt;- set.ident cl.remove &lt;- paste0(&#39;Clust.&#39;, cl) index.remove &lt;- which( dat.seurat@meta.data[, set.ident] == cl.remove &amp; dat.seurat@meta.data[[&#39;Progenitors_1&#39;]] &lt; th ) dat.remove &lt;- dat.seurat[, index.remove] dat.keep &lt;- dat.seurat[, -index.remove] dim(dat.remove) ## [1] 20082 922 dim(dat.keep) ## [1] 20082 24652 # Cells we keep DimPlot(dat.keep, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) # Cells we remove DimPlot(dat.remove, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal[cl], label.size = 4) # Prepare for multiple plots define_region &lt;- function(row, col){ viewport(layout.pos.row = row, layout.pos.col = col) } for (marker in markers){ cat(&quot;\\n\\n### Show &quot;, marker, &quot; expression \\n&quot;) dat.keep@meta.data[[marker]] &lt;- dat.keep@assays$RNA@data[marker,] # Data summary of this marker in cells we keep print(summary(dat.keep@meta.data[[marker]])) dat.remove@meta.data[[marker]] &lt;- dat.remove@assays$RNA@data[marker,] # Data summary of this marker in cells we remove print(summary(dat.remove@meta.data[[marker]])) # Lowest values are grey col.pal &lt;- c(&quot;#C2C1BC1A&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) # Lowest values are transparent col.pal.transp &lt;- c(&quot;#C2C1BC00&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) p1 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal.transp) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = no dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p2 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p3 &lt;- ggplot(dat.keep@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Kept cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p4 &lt;- ggplot(dat.remove@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Removed cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) require(grid) grid.newpage() pushViewport(viewport(layout = grid.layout(3, 2))) print(p1, vp=define_region(1, 1:2)) print(p2, vp=define_region(2, 1:2)) print(p3, vp = define_region(3, 1)) print(p4, vp = define_region(3, 2)) } ## ## ## ### Show Btg2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3624 0.5865 3.5557 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.6226 1.2034 3.3614 ## ## ## ### Show Sox1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.05983 0.00000 2.60269 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1077 0.0000 1.9542 ## ## ## ### Show Sox2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.5731 1.2186 3.3960 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.4957 1.1324 1.0691 1.5948 3.1166 ## ## ## ### Show Sox3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06558 0.00000 2.47830 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1326 0.0000 2.2837 ## ## ## ### Show Tubb3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.308 2.836 2.365 3.383 4.718 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.7655 1.4812 4.1188 ## ## ## ### Show Olig2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02193 0.00000 2.88069 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06679 0.00000 2.44816 ## ## ## ### Show Pax6 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3148 0.0000 4.2669 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.6372 0.6888 1.2798 2.8366 ## ## ## ### Show Pax7 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.0737 0.0000 2.4990 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1126 0.0000 2.5261 ## ## ## ### Show Isl1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1428 0.0000 4.0365 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.0428 0.0000 2.9624 ## ## ## ### Show Isl2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02845 0.00000 2.58664 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000000 0.000000 0.000000 0.003103 0.000000 1.073523 ## ## ## ### Show Notch1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.2837 0.0000 2.8345 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.4168 0.9010 2.5705 ## ## ## ### Show Dll1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1712 0.0000 2.8924 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3732 0.7146 3.0640 ## ## ## ### Show Cdc25b expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1929 0.0000 3.0537 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3194 0.4201 2.5389 6.4 Threshold = 0.4 # Separate dataset in 2 (cells to keep VS to remove) kcenter &lt;- 3 cl &lt;- 2 set.ident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) Idents(dat.seurat) &lt;- set.ident cl.remove &lt;- paste0(&#39;Clust.&#39;, cl) index.remove &lt;- which( dat.seurat@meta.data[, set.ident] == cl.remove &amp; dat.seurat@meta.data[[&#39;Progenitors_1&#39;]] &lt; th ) dat.remove &lt;- dat.seurat[, index.remove] dat.keep &lt;- dat.seurat[, -index.remove] dim(dat.remove) ## [1] 20082 1462 dim(dat.keep) ## [1] 20082 24112 # Cells we keep DimPlot(dat.keep, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) # Cells we remove DimPlot(dat.remove, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal[cl], label.size = 4) # Prepare for multiple plots define_region &lt;- function(row, col){ viewport(layout.pos.row = row, layout.pos.col = col) } for (marker in markers){ cat(&quot;\\n\\n### Show &quot;, marker, &quot; expression \\n&quot;) dat.keep@meta.data[[marker]] &lt;- dat.keep@assays$RNA@data[marker,] # Data summary of this marker in cells we keep print(summary(dat.keep@meta.data[[marker]])) dat.remove@meta.data[[marker]] &lt;- dat.remove@assays$RNA@data[marker,] # Data summary of this marker in cells we remove print(summary(dat.remove@meta.data[[marker]])) # Lowest values are grey col.pal &lt;- c(&quot;#C2C1BC1A&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) # Lowest values are transparent col.pal.transp &lt;- c(&quot;#C2C1BC00&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) p1 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal.transp) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = no dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p2 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p3 &lt;- ggplot(dat.keep@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Kept cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p4 &lt;- ggplot(dat.remove@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Removed cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) require(grid) grid.newpage() pushViewport(viewport(layout = grid.layout(3, 2))) print(p1, vp=define_region(1, 1:2)) print(p2, vp=define_region(2, 1:2)) print(p3, vp = define_region(3, 1)) print(p4, vp = define_region(3, 2)) } ## ## ## ### Show Btg2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3573 0.5526 3.5557 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.6105 1.2073 3.3614 ## ## ## ### Show Sox1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.05733 0.00000 2.60269 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1313 0.0000 1.9542 ## ## ## ### Show Sox2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.5594 1.1989 3.3960 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.654 1.166 1.112 1.639 3.117 ## ## ## ### Show Sox3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06292 0.00000 2.47830 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1518 0.0000 2.2837 ## ## ## ### Show Tubb3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.417 2.862 2.403 3.394 4.718 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.7356 1.3919 4.1188 ## ## ## ### Show Olig2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02069 0.00000 2.88069 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.07066 0.00000 2.44816 ## ## ## ### Show Pax6 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3052 0.0000 4.2669 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.6996 0.7093 1.2982 2.8366 ## ## ## ### Show Pax7 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.07268 0.00000 2.49898 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.115 0.000 2.526 ## ## ## ### Show Isl1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1453 0.0000 4.0365 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.03881 0.00000 2.96245 ## ## ## ### Show Isl2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02907 0.00000 2.58664 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000000 0.000000 0.000000 0.002341 0.000000 1.073523 ## ## ## ### Show Notch1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.2792 0.0000 2.8345 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.4422 0.9274 2.6833 ## ## ## ### Show Dll1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1676 0.0000 2.8924 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3583 0.6304 3.0640 ## ## ## ### Show Cdc25b expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1896 0.0000 3.0537 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3276 0.5361 2.5389 6.5 Threshold = 0.5 # Separate dataset in 2 (cells to keep VS to remove) kcenter &lt;- 3 cl &lt;- 2 set.ident &lt;- paste0(&#39;kmeanClust_&#39;, kcenter) col.pal &lt;- few_pal(&quot;Dark&quot;)(kcenter) Idents(dat.seurat) &lt;- set.ident cl.remove &lt;- paste0(&#39;Clust.&#39;, cl) index.remove &lt;- which( dat.seurat@meta.data[, set.ident] == cl.remove &amp; dat.seurat@meta.data[[&#39;Progenitors_1&#39;]] &lt; th ) dat.remove &lt;- dat.seurat[, index.remove] dat.keep &lt;- dat.seurat[, -index.remove] dim(dat.remove) ## [1] 20082 2063 dim(dat.keep) ## [1] 20082 23511 # Cells we keep DimPlot(dat.keep, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal, label.size = 4) # Cells we remove DimPlot(dat.remove, group.by = set.ident, reduction = &quot;umap&quot;, cols = col.pal[cl], label.size = 4) # Prepare for multiple plots define_region &lt;- function(row, col){ viewport(layout.pos.row = row, layout.pos.col = col) } for (marker in markers){ cat(&quot;\\n\\n### Show &quot;, marker, &quot; expression \\n&quot;) dat.keep@meta.data[[marker]] &lt;- dat.keep@assays$RNA@data[marker,] # Data summary of this marker in cells we keep print(summary(dat.keep@meta.data[[marker]])) dat.remove@meta.data[[marker]] &lt;- dat.remove@assays$RNA@data[marker,] # Data summary of this marker in cells we remove print(summary(dat.remove@meta.data[[marker]])) # Lowest values are grey col.pal &lt;- c(&quot;#C2C1BC1A&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) # Lowest values are transparent col.pal.transp &lt;- c(&quot;#C2C1BC00&quot;, &quot;#E8AA0C80&quot;, &quot;#21908C80&quot;, &quot;#44015480&quot;) p1 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal.transp) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = no dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p2 &lt;- ggplot(dat.seurat@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=20), plot.subtitle = element_text(size=15)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(marker, &quot; expression in all cells&quot;), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p3 &lt;- ggplot(dat.keep@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Kept cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) p4 &lt;- ggplot(dat.remove@meta.data, aes_string(x = &quot;Progenitors_1&quot;, y = &quot;Neurons_1&quot;, color = marker)) + geom_point(size = 1.5) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, axis.text=element_text(size=12), axis.title=element_text(size=14), plot.title = element_text(size=18), plot.subtitle = element_text(size=12)) + scale_color_gradientn(colors = col.pal) + labs(title = paste0(&quot;Removed cells with S = &quot;, th), subtitle = &quot;No expression detected = grey dot&quot;) + geom_vline(xintercept = th, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1) require(grid) grid.newpage() pushViewport(viewport(layout = grid.layout(3, 2))) print(p1, vp=define_region(1, 1:2)) print(p2, vp=define_region(2, 1:2)) print(p3, vp = define_region(3, 1)) print(p4, vp = define_region(3, 2)) } ## ## ## ### Show Btg2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3516 0.5085 3.5557 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.6007 1.1833 3.3614 ## ## ## ### Show Sox1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.05561 0.00000 2.60269 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1293 0.0000 1.9542 ## ## ## ### Show Sox2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.5415 1.1584 3.3960 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.7109 1.2008 1.1557 1.6745 3.1166 ## ## ## ### Show Sox3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06065 0.00000 2.47830 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1517 0.0000 2.2837 ## ## ## ### Show Tubb3 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.580 2.890 2.446 3.406 4.718 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.7339 1.3751 4.1449 ## ## ## ### Show Olig2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.01959 0.00000 2.88069 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.06872 0.00000 2.44816 ## ## ## ### Show Pax6 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.2923 0.0000 4.2669 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.7438 0.7389 1.3339 3.1041 ## ## ## ### Show Pax7 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.07125 0.00000 2.49898 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 0.119 0.000 2.526 ## ## ## ### Show Isl1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1481 0.0000 4.0365 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.03824 0.00000 2.96245 ## ## ## ### Show Isl2 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00000 0.00000 0.00000 0.02965 0.00000 2.58664 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000000 0.000000 0.000000 0.003529 0.000000 1.916826 ## ## ## ### Show Notch1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.2734 0.0000 2.8345 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.4609 0.9585 2.6833 ## ## ## ### Show Dll1 expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1637 0.0000 2.8924 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3476 0.5450 3.0640 ## ## ## ### Show Cdc25b expression ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.1862 0.0000 3.0537 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.3263 0.5165 2.5389 "],
["session-info.html", "7 Session info", " 7 Session info ## R version 3.4.4 (2018-03-15) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 16.04.4 LTS ## ## Matrix products: default ## BLAS: /usr/lib/openblas-base/libblas.so.3 ## LAPACK: /usr/lib/libopenblasp-r0.2.18.so ## ## locale: ## [1] LC_CTYPE=fr_FR.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=fr_FR.UTF-8 LC_COLLATE=fr_FR.UTF-8 ## [5] LC_MONETARY=fr_FR.UTF-8 LC_MESSAGES=fr_FR.UTF-8 ## [7] LC_PAPER=fr_FR.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=fr_FR.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] grid methods stats graphics grDevices utils datasets ## [8] base ## ## other attached packages: ## [1] ggthemes_4.2.0 viridis_0.5.1 viridisLite_0.3.0 knitr_1.30 ## [5] ggplot2_3.3.2 wesanderson_0.3.6 gridExtra_2.3 ggExtra_0.9 ## [9] RColorBrewer_1.1-2 Seurat_3.1.1 ## ## loaded via a namespace (and not attached): ## [1] Rtsne_0.15 colorspace_2.0-0 ellipsis_0.3.1 ## [4] ggridges_0.5.1 rstudioapi_0.13 farver_2.0.3 ## [7] leiden_0.3.1 listenv_0.7.0 npsurv_0.4-0 ## [10] ggrepel_0.9.0 codetools_0.2-15 splines_3.4.4 ## [13] R.methodsS3_1.7.1 lsei_1.2-0 jsonlite_1.7.2 ## [16] ica_1.0-2 cluster_2.1.0 png_0.1-7 ## [19] R.oo_1.23.0 uwot_0.1.4 shiny_1.5.0 ## [22] sctransform_0.2.0 compiler_3.4.4 httr_1.4.2 ## [25] Matrix_1.2-14 fastmap_1.0.1 lazyeval_0.2.2 ## [28] later_1.1.0.1 htmltools_0.5.0 tools_3.4.4 ## [31] rsvd_1.0.2 igraph_1.2.6 gtable_0.3.0 ## [34] glue_1.4.2 RANN_2.6.1 reshape2_1.4.4 ## [37] dplyr_1.0.2 Rcpp_1.0.5 vctrs_0.3.6 ## [40] gdata_2.18.0 ape_5.3 nlme_3.1-142 ## [43] gbRd_0.4-11 lmtest_0.9-37 xfun_0.19 ## [46] stringr_1.4.0 globals_0.12.4 mime_0.9 ## [49] miniUI_0.1.1.1 lifecycle_0.2.0 irlba_2.3.3 ## [52] gtools_3.8.1 future_1.15.0 MASS_7.3-51.4 ## [55] zoo_1.8-6 scales_1.1.1 promises_1.1.1 ## [58] parallel_3.4.4 yaml_2.2.1 reticulate_1.13 ## [61] pbapply_1.4-2 stringi_1.5.3 caTools_1.17.1.2 ## [64] bibtex_0.4.2 Rdpack_0.11-0 SDMTools_1.1-221.1 ## [67] rlang_0.4.9 pkgconfig_2.0.3 bitops_1.0-6 ## [70] evaluate_0.14 lattice_0.20-35 ROCR_1.0-7 ## [73] purrr_0.3.4 htmlwidgets_1.5.3 labeling_0.4.2 ## [76] cowplot_0.9.4 tidyselect_1.1.0 RcppAnnoy_0.0.14 ## [79] plyr_1.8.6 magrittr_2.0.1 bookdown_0.17 ## [82] R6_2.5.0 gplots_3.0.1.1 generics_0.1.0 ## [85] pillar_1.4.7 withr_2.3.0 fitdistrplus_1.0-14 ## [88] survival_3.1-7 tibble_3.0.4 future.apply_1.3.0 ## [91] tsne_0.1-3 crayon_1.3.4 KernSmooth_2.23-15 ## [94] plotly_4.9.1 rmarkdown_1.17 data.table_1.12.6 ## [97] metap_1.1 digest_0.6.27 xtable_1.8-4 ## [100] tidyr_1.1.2 httpuv_1.5.4 R.utils_2.9.0 ## [103] RcppParallel_5.0.2 munsell_0.5.0 "]
]
